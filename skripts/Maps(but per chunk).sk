import:
    java.time.Instant

function saveMap(n: string):
    loop all chunks within getLocation("map::1") and getLocation("map::2"):

        set {_x} to loop-chunk.getX()
        set {_z} to loop-chunk.getZ()
        set {_highestLowest::*} to getLocationsExtremes(getLocation("map::1") and getLocation("map::2"))
        set {_lowestY} to {_highestLowest::1}.getY()
        set {_highestY} to {_highestLowest::2}.getY()

        set {_corners::*} to getChunkCorners({_x}, {_z}, {_highestY}, {_lowestY})

        set {_s} to structure named "%{_n}%:%hashChunk(loop-chunk)%"
        fill {_s} between {_corners::1} and {_corners::2}
        save structure {_s}
        broadcast "&aSaved chunk at X: %{_x}%, Z: %{_z}% for map '%{_n}%'."
        wait 1 tick
        
    add {_n} to {maps::names::*} if {maps::names::*} doesn't contain {_n}

function loadMap(n: string):
    set {_start} to Instant.now().toEpochMilli()
    loop all entities within getLocation("map::1") and getLocation("map::2"):
        if loop-entity is not player:
            kill loop-entity

    set {_chunks::*} to shuffled all chunks within getLocation("map::1") and getLocation("map::2")
    set {_size} to size of {_chunks::*}
    set {_eta} to {_size} / (first element of tps)
    broadcast "&aLoading map '%{_n}%' with %{_size}% chunks. Estimated time: %{_eta}% seconds."

    set {_highestLowest::*} to getLocationsExtremes(getLocation("map::1") and getLocation("map::2"))
    set {_lowestY} to {_highestLowest::1}.getY()
    set {_highestY} to {_highestLowest::2}.getY()

    set {_loaded} to 0

    loop {_chunks::*}:
        set {_x} to loop-chunk.getX()
        set {_z} to loop-chunk.getZ()
        set {_corners::*} to getChunkCorners({_x}, {_z}, {_lowestY}, {_highestY})

        set {_s} to structure named "%{_n}%:%hashChunk(loop-chunk)%"
        if {_s} is not set:

            continue
        {_corners::1}.setY({_lowestY})
        place structure {_s} at {_corners::1}
        add 1 to {_loaded}
        send action bar "&aLoaded chunk at %{_x}%, %{_z}% &f(%{_loaded}%/%{_size}%)" to all players
        wait 1 tick
    set {_end} to Instant.now().toEpochMilli()
    set {_duration} to {_end} - {_start}
    broadcast "&aMap '%{_n}%' loaded in %formatMs({_duration})%."
    send action bar "&aMap '%{_n}%' loaded in %formatMs({_duration})%." to all players

function deleteMap(n: string):
    remove {_n} from {maps::names::*}
    loop all chunks within getLocation("map::1") and getLocation("map::2"):
        set {_x} to loop-chunk.getX()
        set {_z} to loop-chunk.getZ()
        set {_s} to structure named "%{_n}%:%hashChunk(loop-chunk)%"
        if {_s} is set:
            delete structure {_s}
            broadcast "&aDeleted chunk at X: %{_x}%, Z: %{_z}% for map '%{_n}%'."
        else:
            broadcast "&cNo structure found for chunk at X: %{_x}%, Z: %{_z}% for map '%{_n}%'."

command map [<text>] [<text>] [<text>]:
    permission: "map.admin"
    trigger:
        if arg-2 is not set:
            send "&cPlease provide a map name."
            exit
        if arg-1 is "save":
            saveMap(arg-2)
        else if arg-1 is "load":
            loadMap(arg-2)
        else if arg-1 is "delete":
            if arg-3 is "confirm":
                deleteMap(arg-2)
                send "&aMap '%arg-2%' deleted."
            else:
                send "&cTo confirm deletion, use '/map delete %arg-2% confirm'."
        else:
            send "&cInvalid argument."

on tab complete of "map":
    set tab completions for position 1 to "save", "load", "delete"
    set tab completions for position 2 to {maps::names::*}