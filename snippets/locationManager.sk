command addlocation [<text>]:
    permission: *
    trigger:
        if arg-1 is set:
            set {_loc} to player.getLocation()
            set {_loc} to {_loc}.getBlock().getLocation()
            set {server::locations::%arg-1%} to {_loc}
            send "&fAdded %fancyLocation({_loc})% as %arg-1%."

function fancyLocation(location: location) :: string:
    return "&f%{_location}.getX()%, %{_location}.getY()%, %{_location}.getZ()%"

function getLocation(key: string) :: location:
    if {server::locations::%{_key}%} is set:
        return {server::locations::%{_key}%}

function getLocations(key: string) :: locations:
    return {server::locations::%{_key}%::*}

function lowestPoint(locations: locations) :: location:
    loop {_locations::*}:
        add loop-value.getY() to {_Y::*}
    set {_sorted::*} to sorted indices of {_Y::*} in ascending order
    set {_i} to {_sorted::1}
    set {_lowest} to {_locations::%{_i}%}
    return {_lowest}

function getChunkCorners(x: integer, z: integer, minY: integer = 0, maxY: integer = 255) :: locations:
    set {_loc1} to location({_x} * 16, {_minY}, {_z} * 16)
    set {_loc2} to location({_x} * 16 + 15, {_maxY}, {_z} * 16 + 15)
    return {_loc1}, {_loc2}

function hashChunk(chunk: chunk) :: integer:
    set {_str} to "%{_chunk}.getX()%-%{_chunk}.getZ()%"
    return {_str}.hashCode()
function chunkHash(chunk: chunk) :: integer:
    set {_str} to "%{_chunk}.getX()%-%{_chunk}.getZ()%"
    return {_str}.hashCode()
